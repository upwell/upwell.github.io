<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: django | Note Everything]]></title>
  <link href="http://upwell.github.io/blog/categories/django/atom.xml" rel="self"/>
  <link href="http://upwell.github.io/"/>
  <updated>2014-09-12T11:08:16+08:00</updated>
  <id>http://upwell.github.io/</id>
  <author>
    <name><![CDATA[hanh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[django - use silk for profiling]]></title>
    <link href="http://upwell.github.io/blog/2014/08/13/django-use-silk-for-profiling/"/>
    <updated>2014-08-13T17:41:00+08:00</updated>
    <id>http://upwell.github.io/blog/2014/08/13/django-use-silk-for-profiling</id>
    <content type="html"><![CDATA[<p><a href="https://github.com/django-debug-toolbar/django-debug-toolbar">django-debug-toolbar</a> does not work for ajax requests. Here comes <a href="https://github.com/mtford90/silk">silk</a> which works perfect for the ajax condition.</p>

<h3 id="toc_0">Installation</h3>

<p>Following the <a href="https://github.com/mtford90/silk">instructions</a> to install and configure for your own projects.</p>

<h3 id="toc_1">Tips</h3>

<h4 id="toc_2">Middleware Settings</h4>

<p>Pay attention to the <strong>middleware</strong> setting, you should not just append the line at the end of existed middle settings.  </p>

<p>This would give you lots of error messages:  </p>

<blockquote>
<p>AttributeError: &#39;thread._local&#39; object has no attribute &#39;temp_identifier&#39;</p>
</blockquote>

<p>The solutions is, put it before the csrf middleware, like
<code>
MIDDLEWARE_CLASSES = (
    &#39;django.contrib.sessions.middleware.SessionMiddleware&#39;,
    &#39;django.middleware.common.CommonMiddleware&#39;,
    &#39;silk.middleware.SilkyMiddleware&#39;,
    &#39;django.middleware.csrf.CsrfViewMiddleware&#39;,
    &#39;django.contrib.auth.middleware.AuthenticationMiddleware&#39;,
    &#39;django.contrib.messages.middleware.MessageMiddleware&#39;,
    &#39;django.middleware.clickjacking.XFrameOptionsMiddleware&#39;,
    &#39;django.middleware.locale.LocaleMiddleware&#39;,
)
</code></p>

<h4 id="toc_3">Server Error</h4>

<p>The server side may generate error message like:</p>

<blockquote>
<p>pipe error<br>
MySQL server has gone away</p>
</blockquote>

<p>Add <code>SILKY_MAX_RESPONSE_BODY_SIZE = 1024</code> in <code>settings.py</code>.</p>

<h4 id="toc_4">Static file handling</h4>

<p>If you don&#39;t want to run django in debug mode and also haven&#39;t setup the external server (nginx, uwsgi, etc.) for static file serving.</p>

<p>To make <code>silk</code> display as expected, you need to do the following changes:
```</p>

<h1 id="toc_5">python manage.py collectstatic</h1>
<div class="highlight"><pre><code class="text">This would collect static files to `settings.STATIC_ROOT` folder.

After that, add a url pattern in `urls.py`.
</code></pre>
</div>

<p>url(r&#39;<sup>static/(?P<path>.*)$&#39;,</sup> &#39;django.views.static.serve&#39;,
    {&#39;document_root&#39;: settings.STATIC_ROOT}),
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[django collections]]></title>
    <link href="http://upwell.github.io/blog/2014/06/28/django-collections/"/>
    <updated>2014-06-28T09:35:00+08:00</updated>
    <id>http://upwell.github.io/blog/2014/06/28/django-collections</id>
    <content type="html"><![CDATA[<h2 id="toc_6">django profiling tools</h2>

<p><a href="https://github.com/mtford90/silk">Silky smooth profiling for Django</a></p>

<p><a href="https://github.com/django-debug-toolbar/django-debug-toolbar">Django Debug toolbar</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[two foreign keys to same model]]></title>
    <link href="http://upwell.github.io/blog/2014/06/20/two-foreign-keys-to-same-model/"/>
    <updated>2014-06-20T14:35:00+08:00</updated>
    <id>http://upwell.github.io/blog/2014/06/20/two-foreign-keys-to-same-model</id>
    <content type="html"><![CDATA[<h4 id="toc_7">Use <code>related_name</code>:</h4>
<div class="highlight"><pre><code class="python"><span class="k">class</span> <span class="nc">Test</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">example1</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">Example</span><span class="p">,</span> <span class="n">related_name</span><span class="o">=</span><span class="s">&#39;test1&#39;</span><span class="p">)</span>
    <span class="n">example2</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">Example</span><span class="p">,</span> <span class="n">related_name</span><span class="o">=</span><span class="s">&#39;test2&#39;</span><span class="p">)</span>
</code></pre>
</div>

<p>See <a href="http://stackoverflow.com/questions/543377/how-can-i-have-two-foreign-keys-to-the-same-model-in-django">stackoverflow question</a> and <a href="http://docs.djangoproject.com/en/dev/ref/models/fields/#foreignkey">django doc</a></p>

<h4 id="toc_8">Why <code>related_name</code>:</h4>

<p>The <code>related_name</code> attributes specifies the name of reverse relation from <code>Example</code> model<br>
to your model.</p>

<p>If no <code>related_name</code> is specified, Django creates one using the name of your model with suffix <code>_set</code>,
for instance <code>example.test_set.all()</code></p>

<p>In this case, as there are two foreign keys to <code>Example</code>, if <code>related_name</code> is not specified, Django
doesn&#39;t know how to build up the reverse relation.</p>

<p>See <a href="http://docs.djangoproject.com/en/dev/topics/db/queries/#backwards-related-objects">django doc</a></p>
]]></content>
  </entry>
  
</feed>
