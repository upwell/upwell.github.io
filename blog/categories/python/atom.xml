<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Note Everything]]></title>
  <link href="http://upwell.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://upwell.github.io/"/>
  <updated>2015-02-28T10:14:31+08:00</updated>
  <id>http://upwell.github.io/</id>
  <author>
    <name><![CDATA[hanh]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[python small tips]]></title>
    <link href="http://upwell.github.io/blog/2015/02/28/python-small-tips/"/>
    <updated>2015-02-28T10:09:00+08:00</updated>
    <id>http://upwell.github.io/blog/2015/02/28/python-small-tips</id>
    <content type="html"><![CDATA[<h3 id="toc_11">Join two lists</h3>
<div class="highlight"><pre><code class="text">a = [1, 2, 3]
b = [3, 4, 5]
c = a + b
[1, 2, 3, 3, 4, 5]
</code></pre>
</div>

<h3 id="toc_12">Join two dicts</h3>
<div class="highlight"><pre><code class="python"><span class="n">d1</span> <span class="o">=</span> <span class="p">{</span><span class="mi">1</span><span class="p">:</span> <span class="s">&#39;a&#39;</span><span class="p">,</span> <span class="mi">2</span><span class="p">:</span> <span class="s">&#39;b&#39;</span><span class="p">}</span>
<span class="n">d2</span> <span class="o">=</span> <span class="p">{</span><span class="mi">3</span><span class="p">:</span> <span class="s">&#39;c&#39;</span><span class="p">,</span> <span class="mi">4</span><span class="p">:</span> <span class="s">&#39;d&#39;</span><span class="p">}</span>
<span class="n">d1</span><span class="o">.</span><span class="n">update</span><span class="p">(</span><span class="n">d2</span><span class="p">)</span>
<span class="c"># {1: &#39;a&#39;, 2: &#39;b&#39;, 3: &#39;c&#39;, 4: &#39;d&#39;}</span>
</code></pre>
</div>

<h3 id="toc_13">Check if a list/dictionary/tuple is empty</h3>
<div class="highlight"><pre><code class="text">l = []      # same for {} and ()
if l:
    print &#39;list is not empty&#39;
else:
    print &#39;list is empty&#39;
</code></pre>
</div>

<h3 id="toc_14">Iterate over dictionary</h3>
<div class="highlight"><pre><code class="text">d = {&#39;a&#39;: 1, &#39;b&#39;: 2}
for key in d:
    print key, d[key]
</code></pre>
</div>
<div class="highlight"><pre><code class="text">d = {&#39;a&#39;: 1, &#39;b&#39;: 2}
for key, value in d.iteritems():
    print key, value
</code></pre>
</div>

<h3 id="toc_15">Access the index while looping a list</h3>
<div class="highlight"><pre><code class="text">l = [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;, &#39;d&#39;]
for idx, value in enumerate(l):
    print idx, value
</code></pre>
</div>

<h3 id="toc_16">Reverse range</h3>
<div class="highlight"><pre><code class="text">&gt;&gt;&gt; reversed(range(3))
[2, 1, 0]
</code></pre>
</div>

<h3 id="toc_17">Select items from a list randomly</h3>
<div class="highlight"><pre><code class="python"><span class="kn">import</span> <span class="nn">random</span>

<span class="n">l</span> <span class="o">=</span> <span class="p">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">]</span>
<span class="k">print</span> <span class="n">random</span><span class="o">.</span><span class="n">choice</span><span class="p">(</span><span class="n">l</span><span class="p">)</span>         <span class="c"># select single item</span>
<span class="k">print</span> <span class="n">random</span><span class="o">.</span><span class="n">sample</span><span class="p">(</span><span class="n">l</span><span class="p">,</span> <span class="mi">3</span><span class="p">)</span>      <span class="c"># select 3 random items</span>
</code></pre>
</div>

<h3 id="toc_18">Split and convert to int</h3>
<div class="highlight"><pre><code class="python"><span class="n">c</span> <span class="o">=</span> <span class="s">&#39;1,2,3,4&#39;</span>
<span class="n">c</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">)</span>                <span class="c"># [&#39;1&#39;,&#39;2&#39;,&#39;3&#39;,&#39;4&#39;]</span>
<span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="n">c</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s">&#39;,&#39;</span><span class="p">))</span>      <span class="c"># [1,2,3,4]</span>
</code></pre>
</div>

<h3 id="toc_19">Mutable and immutable</h3>

<p><strong>Immutable</strong>:</p>

<ul>
<li>integers and other numerical types</li>
<li>string types like str and unicode</li>
<li>tuples</li>
</ul>

<p><strong>Mutable</strong>: everything else, like,</p>

<ul>
<li>lists</li>
<li>dicts</li>
<li>class</li>
<li>class instance</li>
<li>etc.</li>
</ul>

<h3 id="toc_20">Double quote VS. single quote</h3>

<ul>
<li>use double quotes around strings that are used for interpolation or that are natural language messages</li>
<li>single quotes for small symbol-like strings</li>
<li>use triple double quotes for docstrings and raw string literals
```
LIGHT_MESSAGES = {
&#39;English&#39;: &quot;There are %(number_of_lights)s lights.&quot;,
&#39;Pirate&#39;:  &quot;Arr! Thar be %(number_of_lights)s lights.&quot;
}</li>
</ul>

<p>def lights_message(language, number_of_lights):
    &quot;&quot;&quot;Return a language-appropriate string reporting the light count.&quot;&quot;&quot;
    return LIGHT_MESSAGES[language] % locals()</p>

<p>def is_pirate(message):
    &quot;&quot;&quot;Return True if the given message sounds piratical.&quot;&quot;&quot;
    return re.search(r&quot;(?i)(arr|avast|yohoho)!&quot;, message) is not None
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[django collections]]></title>
    <link href="http://upwell.github.io/blog/2014/06/28/django-collections/"/>
    <updated>2014-06-28T09:35:00+08:00</updated>
    <id>http://upwell.github.io/blog/2014/06/28/django-collections</id>
    <content type="html"><![CDATA[<h2 id="toc_21">django profiling tools</h2>

<p><a href="https://github.com/mtford90/silk">Silky smooth profiling for Django</a></p>

<p><a href="https://github.com/django-debug-toolbar/django-debug-toolbar">Django Debug toolbar</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[two foreign keys to same model]]></title>
    <link href="http://upwell.github.io/blog/2014/06/20/two-foreign-keys-to-same-model/"/>
    <updated>2014-06-20T14:35:00+08:00</updated>
    <id>http://upwell.github.io/blog/2014/06/20/two-foreign-keys-to-same-model</id>
    <content type="html"><![CDATA[<h4 id="toc_22">Use <code>related_name</code>:</h4>
<div class="highlight"><pre><code class="python"><span class="k">class</span> <span class="nc">Test</span><span class="p">(</span><span class="n">models</span><span class="o">.</span><span class="n">Model</span><span class="p">):</span>
    <span class="n">example1</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">Example</span><span class="p">,</span> <span class="n">related_name</span><span class="o">=</span><span class="s">&#39;test1&#39;</span><span class="p">)</span>
    <span class="n">example2</span> <span class="o">=</span> <span class="n">models</span><span class="o">.</span><span class="n">ForeignKey</span><span class="p">(</span><span class="n">Example</span><span class="p">,</span> <span class="n">related_name</span><span class="o">=</span><span class="s">&#39;test2&#39;</span><span class="p">)</span>
</code></pre>
</div>

<p>See <a href="http://stackoverflow.com/questions/543377/how-can-i-have-two-foreign-keys-to-the-same-model-in-django">stackoverflow question</a> and <a href="http://docs.djangoproject.com/en/dev/ref/models/fields/#foreignkey">django doc</a></p>

<h4 id="toc_23">Why <code>related_name</code>:</h4>

<p>The <code>related_name</code> attributes specifies the name of reverse relation from <code>Example</code> model<br>
to your model.</p>

<p>If no <code>related_name</code> is specified, Django creates one using the name of your model with suffix <code>_set</code>,
for instance <code>example.test_set.all()</code></p>

<p>In this case, as there are two foreign keys to <code>Example</code>, if <code>related_name</code> is not specified, Django
doesn&#39;t know how to build up the reverse relation.</p>

<p>See <a href="http://docs.djangoproject.com/en/dev/topics/db/queries/#backwards-related-objects">django doc</a></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python long line wrap]]></title>
    <link href="http://upwell.github.io/blog/2013/12/12/python-long-line-wrap/"/>
    <updated>2013-12-12T16:12:00+08:00</updated>
    <id>http://upwell.github.io/blog/2013/12/12/python-long-line-wrap</id>
    <content type="html"><![CDATA[<h2 id="toc_24">Long line with chained methods</h2>

<p>Use additional <strong>parenthesis</strong>.</p>
<div class="highlight"><pre><code class="python"><span class="n">subkeyword</span> <span class="o">=</span> <span class="p">(</span>
        <span class="n">Session</span><span class="o">.</span><span class="n">query</span><span class="p">(</span><span class="n">Subkeyword</span><span class="o">.</span><span class="n">subkeyword_id</span><span class="p">,</span> <span class="n">Subkeyword</span><span class="o">.</span><span class="n">subkeyword_word</span><span class="p">)</span>
        <span class="o">.</span><span class="n">filter_by</span><span class="p">(</span><span class="n">subkeyword_company_id</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">e_company_id</span><span class="p">)</span>
        <span class="o">.</span><span class="n">filter_by</span><span class="p">(</span><span class="n">subkeyword_word</span><span class="o">=</span><span class="n">subkeyword_word</span><span class="p">)</span>
        <span class="o">.</span><span class="n">filter_by</span><span class="p">(</span><span class="n">subkeyword_active</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
        <span class="o">.</span><span class="n">one</span><span class="p">()</span>
    <span class="p">)</span>
</code></pre>
</div>

<h2 id="toc_25">Long string</h2>

<p>Python concatenates string literals which appear adjacent to each other.</p>
<div class="highlight"><pre><code class="python"><span class="k">def</span> <span class="nf">fun</span><span class="p">():</span>
    <span class="k">print</span> <span class="s">&#39;{0} Here is a really long &#39;</span> \
          <span class="s">&#39;sentence with {1}&#39;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="mi">3</span><span class="p">,</span> <span class="mi">5</span><span class="p">)</span>
</code></pre>
</div>
]]></content>
  </entry>
  
</feed>
